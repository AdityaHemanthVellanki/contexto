import client, { modelMapping } from '@/lib/azureOpenAI.server';
import { logUsage } from './usage';

/**
 * Refines a draft answer using Azure OpenAI
 * 
 * @param draft Draft text to refine
 * @param instructions Optional instructions for refinement
 * @param userId Authenticated user ID for usage tracking
 * @returns Refined version of the draft text
 * @throws Error if the refinement fails or if userId is not provided
 */
export async function runRefineAnswer(draft: string, instructions: string, userId: string): Promise<string> {
  // Input validation
  if (!draft || draft.trim() === '') {
    throw new Error('Refinement requires a draft text');
  }

  if (!userId) {
    throw new Error('User ID is required for answer refinement');
  }

  try {
    // Build messages array with system prompt, draft, and instructions
    const messages = [
      {
        role: 'system' as const,
        content: 'You are an expert refinement assistant. Improve the provided text based on the instructions.'
      },
      {
        role: 'user' as const,
        content: `Draft text to refine:\n\n${draft}`
      }
    ];

    // Add instructions
    if (instructions && instructions.trim() !== '') {
      messages.push({
        role: 'user' as const,
        content: `Instructions for refinement: ${instructions}`
      });
    } else {
      messages.push({
        role: 'user' as const,
        content: 'Please improve this text for clarity, coherence, and accuracy.'
      });
    }

    // Ensure client is initialized
    if (!client) {
      throw new Error('Azure OpenAI client is not initialized');
    }

    // Call Azure OpenAI chat completions API
    const response = await client.chat.completions.create({
      model: modelMapping.turbo as string, // Using turbo instead of refine as there's no refine in Azure OpenAI
      messages,
      temperature: 0.2,
      max_tokens: 1500
    });

    // Validate response
    if (!response.choices || response.choices.length === 0) {
      throw new Error('No refined answer generated by Azure OpenAI API');
    }

    const refinedAnswer = response.choices[0]?.message?.content;
    
    if (!refinedAnswer) {
      throw new Error('Empty refinement returned from Azure OpenAI API');
    }

    // Log usage with user ID
    await logUsage('refine', {
      promptTokens: response.usage?.prompt_tokens || 0,
      completionTokens: response.usage?.completion_tokens || 0
    }, userId);

    return refinedAnswer;
  } catch (error) {
    // Handle specific Azure OpenAI API errors
    if (error instanceof Error) {
      // Specific error handling based on error types
      if (error.message.includes('API key')) {
        throw new Error('Azure OpenAI authentication failed - check API key');
      } else if (error.message.includes('rate limit')) {
        throw new Error('Azure OpenAI rate limit exceeded - try again later');
      } else if (error.message.includes('timeout')) {
        throw new Error('Azure OpenAI request timed out - try again later');
      } else if (error.message.includes('token')) {
        throw new Error('Azure OpenAI token limit exceeded - try with shorter text');
      }
      
      throw new Error(`Answer refinement failed: ${error.message}`);
    }
    
    throw new Error('Answer refinement failed due to an unknown error');
  }
}
