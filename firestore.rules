rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Pipelines: only the owner can read or write their own pipeline docs
    match /pipelines/{pipelineId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null
                            && request.auth.uid == resource.data.userId;
      allow read: if request.auth != null
                  && request.auth.uid == resource.data.userId;
    }

    // Uploads: only the owner can access their own uploads
    match /uploads/{uploadId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      // Only allow deletion if the user owns the document and it's not being processed
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.userId && 
                    (resource.data.status != "processing");
      
      // Queries subcollection: each query belongs to the user who owns the parent upload
      match /queries/{queryId} {
        allow create: if request.auth != null && 
                      get(/databases/$(database)/documents/uploads/$(uploadId)).data.userId == request.auth.uid;
        allow read: if request.auth != null && 
                    get(/databases/$(database)/documents/uploads/$(uploadId)).data.userId == request.auth.uid;
        allow update: if request.auth != null && 
                      get(/databases/$(database)/documents/uploads/$(uploadId)).data.userId == request.auth.uid;
        allow delete: if false;
      }
    }

    // Embeddings: only the owner can access their embeddings
    match /embeddings/{embeddingId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if false;
    }
    
    // Embeddings subcollections (chunks)
    match /embeddings/{embeddingId}/{document=**} {
      allow read: if request.auth != null && 
                    get(/databases/$(database)/documents/embeddings/$(embeddingId)).data.userId == request.auth.uid;
      allow write: if false;
    }
    
    // Exports: only the owner can create and read their exports
    match /exports/{exportId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read:   if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if false;
    }

    // Usage metrics: any authenticated user can write their own usage logs,
    // but nobody can read them client-side.
    match /usage_metrics/{entryId} {
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.userId;
      allow read: if false;
      allow update, delete: if false;
    }
    
    // Conversations: only the owner can access their own conversation sessions
    match /conversations/{sessionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Messages subcollection: each message belongs to the user who owns the parent conversation
      match /messages/{messageId} {
        allow create: if request.auth != null && 
                      get(/databases/$(database)/documents/conversations/$(sessionId)).data.userId == request.auth.uid;
        allow read: if request.auth != null && 
                    get(/databases/$(database)/documents/conversations/$(sessionId)).data.userId == request.auth.uid;
        allow update: if request.auth != null && 
                      get(/databases/$(database)/documents/conversations/$(sessionId)).data.userId == request.auth.uid;
        allow delete: if request.auth != null && 
                      get(/databases/$(database)/documents/conversations/$(sessionId)).data.userId == request.auth.uid;
      }
    }
  }
}